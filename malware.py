import ast

def analyze_malware(code):
    try:
        # Parse the code into an Abstract Syntax Tree (AST)
        parsed_code = ast.parse(code)

        # Check for potentially harmful patterns in the AST
        for node in ast.walk(parsed_code):
            if isinstance(node, ast.Import):
                print("Potential attempt to import modules detected:", node.names)
            elif isinstance(node, ast.Attribute) and isinstance(node.value, ast.Name) and node.value.id == "_builtins_":
                print("Potential use of _builtins_ detected:", node.attr)
            elif isinstance(node, ast.Call):
                if isinstance(node.func, ast.Name) and node.func.id == "exec":
                    print("Potential use of exec() function detected")

        print("Malware analysis completed successfully.")

    except SyntaxError as e:
        print("Syntax error in the provided code:", e)

if __name__ == "__main__":
    # Example code to analyze (you can replace this with actual malware code)
    malware_code = """
import os
print("Attempting to access sensitive system resources...")
print("Current directory:", os.getcwd())
    """

    # Analyze the malware code
    analyze_malware(malware_code)
